import os
import sys
import subprocess
from pathlib import Path
import importlib.util
import time
import random

def limpar_tela():
    """Limpa a tela do terminal"""
    os.system('cls' if os.name == 'nt' else 'clear')

def animacao_loading(texto="Carregando", duracao=0.5):
    """Exibe uma anima√ß√£o de loading"""
    frames = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
    end_time = time.time() + duracao
    i = 0
    while time.time() < end_time:
        print(f"\r{frames[i % len(frames)]} {texto}...", end='', flush=True)
        time.sleep(0.1)
        i += 1
    print("\r" + " " * (len(texto) + 10), end='\r')

def verificar_arquivos():
    """Verifica se os arquivos necess√°rios existem"""
    arquivos_necessarios = [
        'add_automation.py',
        'remove_automation.py', 
        'billing_automation.py',
        'qtgo_automation.py',
        'setup_automation.py',      
        'odometer_setup.py',        
        'AdicionarGrupo.xlsx',
        'RemoverGrupo.xlsx',
        'ID_billing.xlsx',
        'QTGO_ID.xlsx'
    ]
    
    arquivos_faltando = []
    for arquivo in arquivos_necessarios:
        if not Path(arquivo).exists():
            arquivos_faltando.append(arquivo)
    
    return arquivos_faltando

def mostrar_banner():
    """Exibe o banner do sistema com ASCII art"""
    cores = {
        'azul': '\033[94m',
        'verde': '\033[92m',
        'amarelo': '\033[93m',
        'vermelho': '\033[91m',
        'roxo': '\033[95m',
        'ciano': '\033[96m',
        'reset': '\033[0m',
        'negrito': '\033[1m'
    }
    
    # ASCII art do JARVIS
    jarvis_art = f"""
{cores['ciano']}
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                ‚ïë
    ‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù                ‚ïë
    ‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                ‚ïë
    ‚ïë‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë                ‚ïë
    ‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë                ‚ïë
    ‚ïë ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë{cores['amarelo']}           ü§ñ  rob√¥  para Scope ü§ñ{cores['ciano']}              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{cores['reset']}"""
    
    print(jarvis_art)
    
    # Mensagem aleat√≥ria do JARVIS
    mensagens = [
        "Boa tarde",
        "Jarvis Online !",
        "Bom dia",
        "Bem-vindo !",
        "JARVIS ativo"
    ]
    
    print(f"{cores['verde']}    üí¨ {random.choice(mensagens)}{cores['reset']}")
    print()

def mostrar_menu():
    """Exibe as op√ß√µes do menu com visual melhorado"""
    cores = {
        'titulo': '\033[96m',
        'opcao': '\033[93m',
        'descricao': '\033[37m',
        'reset': '\033[0m',
        'verde': '\033[92m',
        'vermelho': '\033[91m'
    }
    
    print(f"{cores['titulo']}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print(f"‚îÇ                    üéØ MENU PRINCIPAL üéØ                     ‚îÇ")
    print(f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò{cores['reset']}")
    print()
    
    opcoes = [
        ("1", "üöó  Adicionar Carros ao Grupo", "Adiciono Veiculos em grupo especifico"),
        ("2", "üóëÔ∏è   Remover Carros do Grupo", "Removo ve√≠culos do grupo selecionado"),
        ("3", "üí∞  Remover Unidades do Billing", "Removo unidades do Billing"),
        ("4", "üöô  Remover Carros do QTGO", "Solicita√ß√£o desinstala√ß√£o no QTGO"),
        ("5", "‚öôÔ∏è   Setup Autom√°tico", "Fa√ßo Setup de veiculos"),
        ("6", "üìè  Ajuste de Od√¥metro", "Ajusto od√¥metro automaticamente"),
        ("7", "üîç  Verificar Sistema", "Verifica status dos arquivos e planilhas"),
        ("0", "üö™  Sair", "Encerra o sistema")
    ]
    
    for opcao, titulo, descricao in opcoes:
        if opcao == "0":
            print(f"\n{cores['vermelho']}  [{opcao}] {titulo}{cores['reset']}")
        else:
            print(f"{cores['opcao']}  [{opcao}] {titulo}{cores['reset']}")
        print(f"{cores['descricao']}       ‚îî‚îÄ {descricao}{cores['reset']}")
    
    print(f"\n{cores['titulo']}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{cores['reset']}")

def executar_script(nome_script, titulo_operacao):
    """Executa um script Python com visual melhorado"""
    try:
        print(f"\nüöÄ {titulo_operacao}")
        print("‚îÄ" * 50)
        animacao_loading(f"Iniciando {nome_script}", 1)
        
        # Verifica se est√° executando como execut√°vel (PyInstaller)
        if getattr(sys, 'frozen', False):
            # Executando como execut√°vel - importa e executa diretamente
            nome_modulo = nome_script.replace('.py', '')
            
            try:
                # Importa√ß√£o din√¢mica baseada no nome do m√≥dulo
                if nome_modulo in ['add_automation', 'remove_automation', 'billing_automation', 
                                  'qtgo_automation', 'setup_automation', 'odometer_setup']:
                    module = importlib.import_module(nome_modulo)
                    if hasattr(module, 'main'):
                        module.main()
                    else:
                        # Se n√£o tem fun√ß√£o main, executa o c√≥digo principal
                        exec(compile(open(nome_script, 'rb').read(), nome_script, 'exec'))
                        
                print(f"\n‚úÖ {titulo_operacao} conclu√≠da com sucesso!")
                
            except ImportError:
                # Se n√£o conseguir importar, tenta executar como arquivo
                print(f"‚ö†Ô∏è  Tentando execu√ß√£o direta...")
                try:
                    if hasattr(sys, '_MEIPASS'):
                        script_path = os.path.join(sys._MEIPASS, nome_script)
                    else:
                        script_path = nome_script
                    
                    with open(script_path, 'rb') as f:
                        code = compile(f.read(), script_path, 'exec')
                        exec(code)
                        
                except Exception as e:
                    print(f"‚ùå Erro na execu√ß√£o: {str(e)}")
                    raise
                    
                print(f"\n‚úÖ {titulo_operacao} conclu√≠da com sucesso!")
                
        else:
            # Executando como script Python normal - usa subprocess
            resultado = subprocess.run([sys.executable, nome_script], 
                                     capture_output=False, 
                                     text=True)
            
            if resultado.returncode == 0:
                print(f"\n‚úÖ {titulo_operacao} conclu√≠da com sucesso!")
            else:
                print(f"\n‚ùå Erro ao executar {titulo_operacao}")
        
        print("‚îÄ" * 50)
            
    except FileNotFoundError:
        print(f"\n‚ùå Arquivo {nome_script} n√£o encontrado!")
        print("üí° Certifique-se de que o arquivo est√° na mesma pasta")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        print(f"üí° Detalhes do erro: {type(e).__name__}")
    
    input("\nüîô Pressione ENTER para voltar ao menu...")

def verificar_planilhas():
    """Verifica e exibe informa√ß√µes sobre as planilhas com visual melhorado"""
    planilhas = {
        'AdicionarGrupo.xlsx': ('Planilha para adicionar carros ao grupo', 'üöó'),
        'RemoverGrupo.xlsx': ('Planilha para remover carros do grupo', 'üóëÔ∏è'),
        'ID_billing.xlsx': ('Planilha com IDs para billing', 'üí∞'),
        'QTGO_ID.xlsx': ('Planilha para remover carros do QTGO', 'üöô')
    }
    
    print("\nüìä STATUS DAS PLANILHAS:")
    print("‚îå" + "‚îÄ" * 58 + "‚îê")
    
    todas_ok = True
    for planilha, (descricao, emoji) in planilhas.items():
        if Path(planilha).exists():
            tamanho = Path(planilha).stat().st_size
            print(f"‚îÇ ‚úÖ {emoji} {planilha:<25} ‚îÇ {tamanho:>10} bytes ‚îÇ")
        else:
            print(f"‚îÇ ‚ùå {emoji} {planilha:<25} ‚îÇ {'N√ÉO ENCONTRADA':>16} ‚îÇ")
            todas_ok = False
    
    print("‚îî" + "‚îÄ" * 58 + "‚îò")
    
    if todas_ok:
        print("\n‚ú® Todas as planilhas est√£o dispon√≠veis!")
    else:
        print("\n‚ö†Ô∏è  Algumas planilhas est√£o faltando!")

def tela_saida():
    """Exibe uma tela de sa√≠da animada"""
    limpar_tela()
    print("\n" * 5)
    print("    üëã Obrigado por usar o JARVIS!")
    print("    " + "‚îÄ" * 30)
    
    mensagens_saida = [
        "Desligando sistemas...",
        "Salvando configura√ß√µes...",
        "Encerrando protocolos...",
        "At√© a pr√≥xima!"
    ]
    
    for msg in mensagens_saida:
        animacao_loading(msg, 0.5)
        print(f"    ‚úì {msg}")
        time.sleep(0.3)
    
    print("\n    ü§ñ JARVIS desconectado.")
    print("\n" * 2)

def main():
    """Fun√ß√£o principal do menu"""
    
    # Tela de boas-vindas
    limpar_tela()
    animacao_loading("Inicializando JARVIS", 1.5)
    
    while True:
        limpar_tela()
        mostrar_banner()
        
        # Verifica arquivos faltando
        arquivos_faltando = verificar_arquivos()
        if arquivos_faltando:
            print("‚ö†Ô∏è  ATEN√á√ÉO: Alguns arquivos est√£o faltando:")
            for arquivo in arquivos_faltando[:3]:  # Mostra apenas os 3 primeiros
                print(f"   ‚Ä¢ {arquivo}")
            if len(arquivos_faltando) > 3:
                print(f"   ‚Ä¢ ... e mais {len(arquivos_faltando) - 3} arquivo(s)")
            print()
        
        mostrar_menu()
        
        try:
            opcao = input("\nüí° Digite sua op√ß√£o: ").strip()
            
            if opcao == '1':
                limpar_tela()
                executar_script('add_automation.py', 'ADICIONAR CARROS AO GRUPO')
                
            elif opcao == '2':
                limpar_tela()
                executar_script('remove_automation.py', 'REMOVER CARROS DO GRUPO')
                
            elif opcao == '3':
                limpar_tela()
                executar_script('billing_automation.py', 'REMOVER UNIDADES DO BILLING')
                
            elif opcao == '4':
                limpar_tela()
                executar_script('qtgo_automation.py', 'REMOVER CARROS DO QTGO')
                
            elif opcao == '5':
                limpar_tela()
                executar_script('setup_automation.py', 'SETUP AUTOM√ÅTICO DO SISTEMA')
                
            elif opcao == '6':
                limpar_tela()
                executar_script('odometer_setup.py', 'AJUSTE AUTOM√ÅTICO DE OD√îMETRO')
                
            elif opcao == '7':
                limpar_tela()
                print("\nüîç VERIFICA√á√ÉO COMPLETA DO SISTEMA")
                print("‚ïê" * 60)
                
                # Verifica planilhas
                verificar_planilhas()
                
                # Verifica scripts
                print("\nüìú STATUS DOS SCRIPTS:")
                print("‚îå" + "‚îÄ" * 58 + "‚îê")
                
                scripts = [
                    ('add_automation.py', 'Adicionar ao grupo', 'üöó'),
                    ('remove_automation.py', 'Remover do grupo', 'üóëÔ∏è'),
                    ('billing_automation.py', 'Automa√ß√£o billing', 'üí∞'),
                    ('qtgo_automation.py', 'Automa√ß√£o QTGO', 'üöô'),
                    ('setup_automation.py', 'Setup autom√°tico', '‚öôÔ∏è'),
                    ('odometer_setup.py', 'Ajuste od√¥metro', 'üìè')
                ]
                
                todos_ok = True
                for script, descricao, emoji in scripts:
                    if Path(script).exists():
                        print(f"‚îÇ ‚úÖ {emoji} {script:<25} ‚îÇ {'DISPON√çVEL':>16} ‚îÇ")
                    else:
                        print(f"‚îÇ ‚ùå {emoji} {script:<25} ‚îÇ {'N√ÉO ENCONTRADO':>16} ‚îÇ")
                        todos_ok = False
                
                print("‚îî" + "‚îÄ" * 58 + "‚îò")
                
                if todos_ok:
                    print("\n‚ú® Todos os scripts est√£o dispon√≠veis!")
                else:
                    print("\n‚ö†Ô∏è  Alguns scripts est√£o faltando!")
                
                # Informa√ß√µes do sistema
                print("\nüíª INFORMA√á√ïES DO SISTEMA:")
                print("‚îå" + "‚îÄ" * 58 + "‚îê")
                print(f"‚îÇ üêç Python: {sys.version.split()[0]:<45} ‚îÇ")
                print(f"‚îÇ üíæ Diret√≥rio: {os.getcwd()[:42]:<42} ‚îÇ")
                print(f"‚îÇ üñ•Ô∏è  Sistema: {sys.platform:<44} ‚îÇ")
                print("‚îî" + "‚îÄ" * 58 + "‚îò")
                
                input("\nüîô Pressione ENTER para voltar ao menu...")
                
            elif opcao == '0':
                tela_saida()
                break
                
            else:
                print("\n‚ùå Op√ß√£o inv√°lida!")
                print("üí° Por favor, digite um n√∫mero entre 0 e 7.")
                animacao_loading("Voltando ao menu", 1)
                
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio.")
            resposta = input("Deseja sair do sistema? (S/N): ").strip().upper()
            if resposta == 'S':
                tela_saida()
                break
            else:
                animacao_loading("Voltando ao menu", 1)
                
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {str(e)}")
            print("üîß Tentando recuperar...")
            animacao_loading("Reiniciando menu", 2)

# Adiciona algumas fun√ß√µes extras para melhorar a experi√™ncia

def exibir_dica_aleatoria():
    """Exibe uma dica aleat√≥ria sobre o sistema"""
    dicas = [
        "üí° Dica: Mantenha suas planilhas sempre atualizadas!",
        "üí° Dica: Use Ctrl+C para cancelar uma opera√ß√£o em andamento.",
        "üí° Dica: Verifique o sistema regularmente para garantir que tudo est√° OK.",
        "üí° Dica: O JARVIS pode processar m√∫ltiplas planilhas sequencialmente.",
        "üí° Dica: Fa√ßa backup das suas planilhas antes de executar as automa√ß√µes."
    ]
    return random.choice(dicas)

def criar_arquivo_log():
    """Cria um arquivo de log para registrar as opera√ß√µes"""
    from datetime import datetime
    
    log_dir = Path("logs")
    if not log_dir.exists():
        log_dir.mkdir()
    
    log_file = log_dir / f"jarvis_{datetime.now().strftime('%Y%m%d')}.log"
    return log_file

# Modifica a fun√ß√£o mostrar_banner para incluir dicas
def mostrar_banner_com_dica():
    """Exibe o banner do sistema com uma dica aleat√≥ria"""
    mostrar_banner()
    print(f"\n{exibir_dica_aleatoria()}\n")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico no sistema: {str(e)}")
        print("üìß Por favor, contate o suporte t√©cnico.")
        input("\nPressione ENTER para encerrar...")