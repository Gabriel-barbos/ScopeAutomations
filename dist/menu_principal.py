import os
import sys
import subprocess
from pathlib import Path
import importlib.util

def limpar_tela():
    """Limpa a tela do terminal"""
    os.system('cls' if os.name == 'nt' else 'clear')

def verificar_arquivos():
    """Verifica se os arquivos necess√°rios existem"""
    arquivos_necessarios = [
        'add_automation.py',
        'remove_automation.py', 
        'billing_automation.py',
        'AdicionarGrupo.xlsx',
        'RemoverGrupo.xlsx',
        'ID_billing.xlsx'
    ]
    
    arquivos_faltando = []
    for arquivo in arquivos_necessarios:
        if not Path(arquivo).exists():
            arquivos_faltando.append(arquivo)
    
    return arquivos_faltando

def mostrar_banner():
    """Exibe o banner do sistema"""
    print("=" * 60)
    print("           SCOPE AUTOMATIONS - MENU PRINCIPAL")
    print("=" * 60)
    print()

def mostrar_menu():
    """Exibe as op√ß√µes do menu"""
    print("Escolha uma op√ß√£o:")
    print()
    print("1 - Adicionar Carros ao Grupo de Ve√≠culos")
    print("2 - Remover Carros do Grupo de Ve√≠culos") 
    print("3 - Remover Unidades do Billing")
    print("4 - Verificar Arquivos do Sistema")
    print("0 - Sair")
    print()
    print("-" * 60)

def executar_script(nome_script):
    """Executa um script Python"""
    try:
        print(f"\nüöÄ Iniciando {nome_script}...")
        print("-" * 40)
        
        # Verifica se est√° executando como execut√°vel (PyInstaller)
        if getattr(sys, 'frozen', False):
            # Executando como execut√°vel - importa e executa diretamente
            nome_modulo = nome_script.replace('.py', '')
            
            try:
                # Tenta importar o m√≥dulo
                if nome_modulo == 'add_automation':
                    import add_automation
                    if hasattr(add_automation, 'main'):
                        add_automation.main()
                    else:
                        # Se n√£o tem fun√ß√£o main, executa o c√≥digo principal
                        exec(open(nome_script).read())
                        
                elif nome_modulo == 'remove_automation':
                    import remove_automation
                    if hasattr(remove_automation, 'main'):
                        remove_automation.main()
                    else:
                        exec(open(nome_script).read())
                        
                elif nome_modulo == 'billing_automation':
                    import billing_automation
                    if hasattr(billing_automation, 'main'):
                        billing_automation.main()
                    else:
                        exec(open(nome_script).read())
                        
                print(f"‚úÖ {nome_script} executado com sucesso!")
                
            except ImportError:
                # Se n√£o conseguir importar, tenta executar como arquivo
                print(f"‚ö†Ô∏è  Importa√ß√£o falhou, tentando execu√ß√£o direta...")
                exec(open(nome_script).read())
                print(f"‚úÖ {nome_script} executado com sucesso!")
                
        else:
            # Executando como script Python normal - usa subprocess
            resultado = subprocess.run([sys.executable, nome_script], 
                                     capture_output=False, 
                                     text=True)
            
            if resultado.returncode == 0:
                print(f"‚úÖ {nome_script} executado com sucesso!")
            else:
                print(f"‚ùå Erro ao executar {nome_script}")
        
        print("-" * 40)
            
    except FileNotFoundError:
        print(f"‚ùå Arquivo {nome_script} n√£o encontrado!")
        print("üí° Certifique-se de que o arquivo est√° na mesma pasta")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {str(e)}")
        print(f"üí° Detalhes do erro: {type(e).__name__}")
    
    input("\nPressione ENTER para continuar...")

def verificar_planilhas():
    """Verifica e exibe informa√ß√µes sobre as planilhas"""
    planilhas = {
        'AdicionarGrupo.xlsx': 'Planilha para adicionar carros ao grupo',
        'RemoverGrupo.xlsx': 'Planilha para remover carros do grupo',
        'ID_billing.xlsx': 'Planilha com IDs para billing'
    }
    
    print("\nüìä STATUS DAS PLANILHAS:")
    print("-" * 40)
    
    for planilha, descricao in planilhas.items():
        if Path(planilha).exists():
            tamanho = Path(planilha).stat().st_size
            print(f"‚úÖ {planilha} - {descricao}")
            print(f"   Tamanho: {tamanho} bytes")
        else:
            print(f"‚ùå {planilha} - N√ÉO ENCONTRADA")
        print()

def main():
    """Fun√ß√£o principal do menu"""
    
    while True:
        limpar_tela()
        mostrar_banner()
        
        # Verifica arquivos faltando
        arquivos_faltando = verificar_arquivos()
        if arquivos_faltando:
            print("‚ö†Ô∏è  ATEN√á√ÉO: Arquivos faltando:")
            for arquivo in arquivos_faltando:
                print(f"   - {arquivo}")
            print()
        
        mostrar_menu()
        
        try:
            opcao = input("Digite sua op√ß√£o: ").strip()
            
            if opcao == '1':
                limpar_tela()
                print("üöó ADICIONAR CARROS AO GRUPO")
                print("Certifique-se de que a planilha 'AdicionarGrupo.xlsx' est√° preenchida")
                input("Pressione ENTER para continuar ou CTRL+C para cancelar...")
                executar_script('add_automation.py')
                
            elif opcao == '2':
                limpar_tela()
                print("üóëÔ∏è  REMOVER CARROS DO GRUPO")
                print("Certifique-se de que a planilha 'RemoverGrupo.xlsx' est√° preenchida")
                input("Pressione ENTER para continuar ou CTRL+C para cancelar...")
                executar_script('remove_automation.py')
                
            elif opcao == '3':
                limpar_tela()
                print("üí∞ REMOVER UNIDADES DO BILLING")
                print("Certifique-se de que a planilha 'ID_billing.xlsx' est√° preenchida")
                input("Pressione ENTER para continuar ou CTRL+C para cancelar...")
                executar_script('billing_automation.py')
                
            elif opcao == '4':
                limpar_tela()
                print("üîç VERIFICA√á√ÉO DO SISTEMA")
                verificar_planilhas()
                
                print("\nüìú SCRIPTS DISPON√çVEIS:")
                print("-" * 40)
                scripts = ['add_automation.py', 'remove_automation.py', 'billing_automation.py']
                for script in scripts:
                    if Path(script).exists():
                        print(f"‚úÖ {script}")
                    else:
                        print(f"‚ùå {script} - N√ÉO ENCONTRADO")
                
                input("\nPressione ENTER para voltar ao menu...")
                
            elif opcao == '0':
                limpar_tela()
                print("üëã Obrigado por usar o Scope Automations!")
                print("Sistema encerrado.")
                break
                
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 0 a 4.")
                input("Pressione ENTER para tentar novamente...")
                
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio.")
            input("Pressione ENTER para voltar ao menu...")
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {str(e)}")
            input("Pressione ENTER para continuar...")

if __name__ == "__main__":
    main()