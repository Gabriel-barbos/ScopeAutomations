import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException
import time
import logging
import os


class CarAdditionAutomation:
    def __init__(self, webdriver_path=None):
        """
        Inicializa a automa√ß√£o
        
        Args:
            webdriver_path (str): Caminho para o ChromeDriver (opcional se estiver no PATH)
        """
        self.webdriver_path = webdriver_path
        self.driver = None
        self.wait = None
        self.nome_grupo = None  # Nome do grupo de ve√≠culos
        
        # Contadores para relat√≥rio
        self.carros_adicionados = []
        self.carros_nao_encontrados = []
        self.carros_ja_no_grupo = []
        self.total_processados = 0
        
        # Configurar logging
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
    
    def setup_driver(self):
        """Configura o WebDriver do Chrome"""
        chrome_options = Options()
        # chrome_options.add_argument("--headless")  # Descomente para executar sem interface gr√°fica
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        if self.webdriver_path:
            self.driver = webdriver.Chrome(executable_path=self.webdriver_path, options=chrome_options)
        else:
            self.driver = webdriver.Chrome(options=chrome_options)
        
        self.wait = WebDriverWait(self.driver, 10)
        self.driver.maximize_window()
        self.driver.get("https://live.mzoneweb.net/mzonex/maintenance/vehiclegroups")
    
    def inserir_chassis_terminal(self):
        """Permite inserir chassis diretamente no terminal"""
        chassis_list = []
        
        print("\n" + "="*50)
        print("üìù INSER√á√ÉO DE CHASSIS")
        print("="*50)
        print("Digite os n√∫meros dos chassis (um por linha)")
        print("Digite 'fim' quando terminar")
        print("-"*50)
        
        while True:
            chassi = input("Chassi: ").strip()
            
            if chassi.lower() == 'fim':
                break
            elif chassi == '':
                continue
            else:
                chassis_list.append(chassi)
                print(f"‚úÖ Chassi adicionado: {chassi} (Total: {len(chassis_list)})")
        
        return chassis_list
    
    def carregar_chassis_excel(self):
        """Carrega chassis de planilha Excel"""
        arquivo = os.path.join(os.path.dirname(__file__), 'AdicionarGrupo.xlsx')
        
        try:
            df = pd.read_excel(arquivo)
            chassis_list = df.iloc[:, 0].dropna().tolist()  # Primeira coluna
            chassis_list = [str(chassi).strip() for chassi in chassis_list]
            
            print(f"‚úÖ {len(chassis_list)} chassis carregados da planilha")
            return chassis_list
        except Exception as e:
            print(f"‚ùå Erro ao carregar planilha: {e}")
            return []
    
    def escolher_metodo_entrada(self):
        """Permite escolher como inserir os chassis"""
        print("\n" + "="*50)
        print("üöó AUTOMA√á√ÉO DE ADI√á√ÉO DE CARROS")
        print("="*50)
        print("Como deseja inserir os chassis?")
        print("1. ‚å®Ô∏è  Digitar no terminal")
        print("2. üìÅ Carregar de planilha Excel")
        print("-"*50)
        
        while True:
            opcao = input("Escolha uma op√ß√£o (1-2): ").strip()
            
            if opcao == '1':
                return self.inserir_chassis_terminal()
            elif opcao == '2':
                return self.carregar_chassis_excel()
            else:
                print("‚ùå Op√ß√£o inv√°lida. Digite 1 ou 2.")
    
    def definir_grupo_veiculos(self):
        """Define qual grupo de ve√≠culos ser√° editado"""
        print("\n" + "="*50)
        print("üè∑Ô∏è  DEFINIR GRUPO DE VE√çCULOS")
        print("="*50)
        
        while True:
            self.nome_grupo = input("Digite o nome do grupo de ve√≠culos: ").strip()
            if self.nome_grupo:
                print(f"‚úÖ Grupo definido: {self.nome_grupo}")
                break
            else:
                print("‚ùå Nome do grupo n√£o pode estar vazio")
    
    def fazer_login_inicial(self):
        """
        Aguarda o usu√°rio fazer login manualmente na primeira vez
        """
        print("\n" + "="*60)
        print("üîê LOGIN MANUAL NECESS√ÅRIO")
        print("="*60)
        print("O navegador foi aberto para voc√™.")
        print("Por favor:")
        print("1. üîë Fa√ßa login na conta do cliente correto")
        print("2. üîç Navegue at√© a p√°gina de 'Editar Grupos de Ve√≠culos'")
        print("3. ‚úÖ Certifique-se de estar na p√°gina correta")
        print("4. ‚è∏Ô∏è  Volte aqui e pressione ENTER para continuar")
        print("-"*60)
        
        # Aguardar confirma√ß√£o do usu√°rio
        input("Pressione ENTER quando estiver pronto para continuar...")
        
        print("‚úÖ Continuando com a automa√ß√£o...")
        time.sleep(2)
    
    def recarregar_pagina(self):
        """Recarrega a p√°gina e aguarda o carregamento"""
        try:
            print("üîÑ Recarregando p√°gina...")
            self.driver.refresh()
            
            # Aguardar p√°gina carregar completamente
            time.sleep(9)
            
            # Aguardar overlay desaparecer (se existir)
            try:
                WebDriverWait(self.driver, 15).until(
                    EC.invisibility_of_element_located((By.CSS_SELECTOR, "div.form-overlay.ng-star-inserted.visible"))
                )
            except TimeoutException:
                pass
            
            print("‚úÖ P√°gina recarregada com sucesso")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro ao recarregar p√°gina: {e}")
            return False

    def pesquisar_grupo(self):
        """Pesquisa o grupo espec√≠fico na lista"""
        try:
            print(f"üîç Pesquisando grupo '{self.nome_grupo}'...")
            
            # Campo de pesquisa de grupos
            campo_pesquisa_grupo = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='search'][placeholder='Pesquisar']"))
            )
            
            # Limpar e pesquisar o grupo
            campo_pesquisa_grupo.clear()
            time.sleep(0.5)
            campo_pesquisa_grupo.send_keys(self.nome_grupo)
            
            # Aguardar carregamento autom√°tico da pesquisa
            time.sleep(2)
            
            # Verificar se o grupo foi encontrado
            grupo_encontrado = self.wait.until(
                EC.presence_of_element_located((By.XPATH, f"//div[contains(@class, 'wj-cell') and contains(text(), '{self.nome_grupo}')]"))
            )
            self.logger.info(f"Grupo '{self.nome_grupo}' encontrado")
            return True
            
        except TimeoutException:
            self.logger.error(f"Grupo '{self.nome_grupo}' n√£o foi encontrado na pesquisa")
            return False
        except Exception as e:
            self.logger.error(f"Erro ao pesquisar grupo: {e}")
            return False

    def clicar_editar_grupo(self):
        """Clica no bot√£o de editar do grupo"""
        try:
            print("‚úèÔ∏è Clicando em editar grupo...")
            
            # Bot√£o editar grupo (bot√£o com √≠cone l√°pis)
            botao_editar = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button.button.btn-mz-grid[title='Editar grupo de ve√≠culos'] i.mz7-pencil"))
            )
            
            time.sleep(1)
            
            # Verificar se n√£o h√° overlay bloqueando
            try:
                overlay_presente = self.driver.find_element(By.CSS_SELECTOR, "div.form-overlay.ng-star-inserted.visible")
                if overlay_presente.is_displayed():
                    print("‚ö†Ô∏è Overlay ainda presente, aguardando...")
                    WebDriverWait(self.driver, 10).until(
                        EC.invisibility_of_element_located((By.CSS_SELECTOR, "div.form-overlay.ng-star-inserted.visible"))
                    )
            except NoSuchElementException:
                pass
            
            # Clicar no bot√£o
            try:
                botao_editar.click()
            except:
                botao_pai = botao_editar.find_element(By.XPATH, "..")
                botao_pai.click()
            
            # Modal de edi√ß√£o carregado
            print("‚è±Ô∏è Aguardando modal de edi√ß√£o carregar...")
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.editor-section")))
            time.sleep(1)
            
            self.logger.info(f"Modal de edi√ß√£o do grupo '{self.nome_grupo}' aberto com sucesso")
            return True
            
        except TimeoutException:
            self.logger.error("N√£o foi poss√≠vel clicar no bot√£o editar ou abrir o modal")
            return False
        except Exception as e:
            self.logger.error(f"Erro ao clicar em editar: {e}")
            return False

    def encontrar_checkbox_por_contexto(self, chassi):
        """
        Tenta encontrar a checkbox espec√≠fica atrav√©s da estrutura HTML pr√≥xima ao chassi
        """
        try:
            possibles_seletores = [
                f"//div[contains(text(), '{chassi}')]/ancestor::tr//input[@type='checkbox']",
                f"//div[contains(text(), '{chassi}')]/ancestor::div[contains(@class, 'row')]//input[@type='checkbox']",
                f"//span[contains(text(), '{chassi}')]/ancestor::tr//input[@type='checkbox']",
                f"//span[contains(text(), '{chassi}')]/ancestor::div[contains(@class, 'row')]//input[@type='checkbox']",
                f"//*[contains(text(), '{chassi}')]/ancestor::*[contains(@class, 'item')]//input[@type='checkbox']",
                f"//*[contains(text(), '{chassi}')]/preceding-sibling::*//input[@type='checkbox']",
                f"//*[contains(text(), '{chassi}')]/following-sibling::*//input[@type='checkbox']"
            ]
            
            for seletor in possibles_seletores:
                try:
                    checkbox = self.driver.find_element(By.XPATH, seletor)
                    if checkbox.is_displayed():
                        self.logger.info(f"Checkbox encontrada por contexto para chassi {chassi}")
                        return checkbox
                except (NoSuchElementException, StaleElementReferenceException):
                    continue
                    
            return None
            
        except Exception as e:
            self.logger.warning(f"Erro ao buscar checkbox por contexto: {e}")
            return None

    def encontrar_checkbox_por_posicao(self, chassi):
        """
        Tenta encontrar a checkbox baseado na posi√ß√£o ap√≥s pesquisar o chassi
        """
        try:
            # Verificar se existe apenas um resultado vis√≠vel ap√≥s a pesquisa
            elementos_chassi = self.driver.find_elements(By.XPATH, f"//*[contains(text(), '{chassi}')]")
            elementos_visiveis = [el for el in elementos_chassi if el.is_displayed()]
            
            if len(elementos_visiveis) == 1:
                # Se h√° apenas um chassi vis√≠vel, pegar a primeira checkbox DESMARCADA
                checkboxes_desmarcadas = self.driver.find_elements(By.CSS_SELECTOR, "input[type='checkbox']:not(:checked)")
                checkboxes_visiveis = [cb for cb in checkboxes_desmarcadas if cb.is_displayed()]
                
                if len(checkboxes_visiveis) == 1:
                    self.logger.info(f"Checkbox encontrada por posi√ß√£o √∫nica para chassi {chassi}")
                    return checkboxes_visiveis[0]
                    
            return None
            
        except Exception as e:
            self.logger.warning(f"Erro ao buscar checkbox por posi√ß√£o: {e}")
            return None

    def processar_checkbox_com_retry(self, checkbox, chassi, max_tentativas=3):
        """
        Processa uma checkbox espec√≠fica com retry para StaleElementReferenceException
        """
        for tentativa in range(max_tentativas):
            try:
                # Para ADI√á√ÉO: Verificar se est√° DESMARCADA (precisa marcar para adicionar)
                is_checked_js = self.driver.execute_script("return arguments[0].checked;", checkbox)
                
                if not is_checked_js:  # Se est√° desmarcada, pode adicionar
                    # Tentar clicar na checkbox para MARCAR (adicionar ao grupo)
                    self.driver.execute_script("arguments[0].click();", checkbox)
                    time.sleep(0.8)
                    
                    # Verificar se chassi foi adicionado (checkbox marcada)
                    time.sleep(1)
                    try:
                        nova_verificacao = self.driver.execute_script("return arguments[0].checked;", checkbox)
                        if nova_verificacao:
                            self.logger.info(f"Chassi {chassi} adicionado ao grupo com sucesso")
                            return True
                        else:
                            self.logger.warning(f"Clique n√£o adicionou o chassi {chassi}")
                            return False
                    except StaleElementReferenceException:
                        self.logger.info(f"Chassi {chassi} adicionado com sucesso (checkbox stale)")
                        return True
                else:
                    self.logger.warning(f"Chassi {chassi} encontrado mas j√° estava no grupo")
                    return False
                    
            except StaleElementReferenceException:
                self.logger.warning(f"StaleElementReferenceException na tentativa {tentativa + 1} para {chassi}")
                if tentativa < max_tentativas - 1:
                    time.sleep(1)
                    checkbox = self.encontrar_checkbox_por_contexto(chassi)
                    if not checkbox:
                        checkbox = self.encontrar_checkbox_por_posicao(chassi)
                    if not checkbox:
                        break
                else:
                    self.logger.info(f"StaleElement na √∫ltima tentativa - assumindo sucesso para {chassi}")
                    return True
            except Exception as e:
                self.logger.error(f"Erro ao processar checkbox (tentativa {tentativa + 1}): {e}")
                if tentativa == max_tentativas - 1:
                    return False
                time.sleep(1)
        
        return False

    def tentar_todas_checkboxes_desmarcadas(self, chassi):
        """
        Como √∫ltimo recurso, tenta marcar todas as checkboxes desmarcadas uma por vez
        at√© encontrar a que corresponde ao chassi
        """
        try:
            self.logger.info(f"Tentando m√©todo de for√ßa bruta para chassi {chassi}")
            
            # Pegar todas as checkboxes DESMARCADAS (para adicionar)
            checkboxes_desmarcadas = self.driver.find_elements(By.CSS_SELECTOR, "input[type='checkbox']:not(:checked)")
            checkboxes_visiveis = [cb for cb in checkboxes_desmarcadas if cb.is_displayed()]
            
            for i, checkbox in enumerate(checkboxes_visiveis):
                try:
                    # Marcar a checkbox (adicionar ao grupo)
                    self.driver.execute_script("arguments[0].click();", checkbox)
                    time.sleep(1)
                    
                    # Verificar se a checkbox foi marcada (indicando sucesso)
                    try:
                        checkbox_marcada = self.driver.execute_script("return arguments[0].checked;", checkbox)
                        if checkbox_marcada:
                            self.logger.info(f"Chassi {chassi} adicionado com sucesso (m√©todo for√ßa bruta, checkbox {i})")
                            return True
                        else:
                            continue
                    except StaleElementReferenceException:
                        self.logger.info(f"Chassi {chassi} adicionado com sucesso (m√©todo for√ßa bruta, checkbox stale)")
                        return True
                        
                except Exception as e:
                    self.logger.warning(f"Erro ao tentar checkbox {i}: {e}")
                    continue
            
            self.logger.warning(f"Nenhuma checkbox adicionou o chassi {chassi} ao grupo")
            return False
            
        except Exception as e:
            self.logger.error(f"Erro no m√©todo for√ßa bruta: {e}")
            return False

    def pesquisar_e_adicionar_chassi(self, chassi):
        """
        Pesquisa um chassi e adiciona ao grupo se encontrado
        """
        try:
            # Campo de pesquisa de chassi dentro do modal
            campo_pesquisa_chassi = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "input.form-input[placeholder='Buscar']"))
            )
            
            # Limpar campo e digitar chassi
            campo_pesquisa_chassi.clear()
            campo_pesquisa_chassi.send_keys(chassi)
            
            # Aguardar carregamento autom√°tico da pesquisa
            time.sleep(2)
            
            # Verificar se o chassi foi encontrado
            elementos_chassi = self.driver.find_elements(By.XPATH, f"//*[contains(text(), '{chassi}')]")
            chassi_encontrado = any(el.is_displayed() for el in elementos_chassi)
            
            if not chassi_encontrado:
                self.logger.warning(f"Chassi {chassi} n√£o encontrado no sistema")
                return False
            
            # M√©todo 1: Tentar encontrar a checkbox espec√≠fica atrav√©s da estrutura HTML
            checkbox_encontrada = self.encontrar_checkbox_por_contexto(chassi)
            if checkbox_encontrada:
                return self.processar_checkbox_com_retry(checkbox_encontrada, chassi)
            
            # M√©todo 2: Se n√£o encontrou por contexto, tentar por posi√ß√£o
            checkbox_encontrada = self.encontrar_checkbox_por_posicao(chassi)
            if checkbox_encontrada:
                return self.processar_checkbox_com_retry(checkbox_encontrada, chassi)
            
            # M√©todo 3: √öltimo recurso - tentar todas as checkboxes desmarcadas
            return self.tentar_todas_checkboxes_desmarcadas(chassi)
            
        except Exception as e:
            self.logger.error(f"Erro geral ao processar chassi {chassi}: {e}")
            return False

    def salvar_alteracoes(self):
        """Salva as altera√ß√µes no grupo usando o seletor correto"""
        try:
            print("üíæ Salvando altera√ß√µes...")
            
            # Primeiro, tentar pelo XPath mais espec√≠fico com o texto exato
            try:
                botao_salvar = self.wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//button[@type='submit' and contains(@class, 'button') and contains(@class, 'btn-mz') and contains(@class, 'success') and normalize-space(text())='Salvar']"))
                )
                self.logger.info("Bot√£o 'Salvar' encontrado pelo XPath com texto")
            except TimeoutException:
                # Se n√£o encontrar pelo texto, tentar pelo seletor CSS corrigido
                try:
                    botao_salvar = self.wait.until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit'].button.btn-mz.success.ng-star-inserted"))
                    )
                    # Verificar se √© realmente o bot√£o "Salvar" pelo texto
                    texto_botao = botao_salvar.text.strip()
                    if "Salvar" not in texto_botao or "criar" in texto_botao.lower():
                        self.logger.warning(f"Bot√£o encontrado n√£o √© o correto. Texto: '{texto_botao}'")
                        raise TimeoutException("Bot√£o incorreto encontrado")
                    self.logger.info("Bot√£o 'Salvar' encontrado pelo CSS selector")
                except TimeoutException:
                    # √öltima tentativa: buscar todos os bot√µes submit e filtrar
                    botoes_submit = self.driver.find_elements(By.CSS_SELECTOR, "button[type='submit']")
                    botao_salvar = None
                    
                    for botao in botoes_submit:
                        try:
                            texto = botao.text.strip()
                            if texto == "Salvar" and "success" in botao.get_attribute("class"):
                                botao_salvar = botao
                                self.logger.info(f"Bot√£o 'Salvar' encontrado por busca manual: '{texto}'")
                                break
                        except:
                            continue
                    
                    if not botao_salvar:
                        raise TimeoutException("Bot√£o 'Salvar' n√£o encontrado em nenhuma tentativa")
            
            # Verificar se o bot√£o est√° realmente vis√≠vel e clic√°vel
            if not botao_salvar.is_displayed():
                self.logger.error("Bot√£o 'Salvar' encontrado mas n√£o est√° vis√≠vel")
                return False
            
            # Log do bot√£o que ser√° clicado
            texto_final = botao_salvar.text.strip()
            classes_final = botao_salvar.get_attribute("class")
            self.logger.info(f"Clicando no bot√£o: '{texto_final}' com classes: '{classes_final}'")
            
            # Clicar no bot√£o
            try:
                botao_salvar.click()
            except Exception as e:
                # Se o clique normal falhar, tentar com JavaScript
                self.logger.warning(f"Clique normal falhou, tentando com JavaScript: {e}")
                self.driver.execute_script("arguments[0].click();", botao_salvar)
            
            # Aguardar confirma√ß√£o de salvamento e fechamento do modal
            print("‚è±Ô∏è Aguardando confirma√ß√£o do salvamento...")
            time.sleep(3)
            
            # Verificar se o modal foi fechado (isso indica que salvou com sucesso)
            try:
                WebDriverWait(self.driver, 8).until(
                    EC.invisibility_of_element_located((By.CSS_SELECTOR, "div.editor-section"))
                )
                self.logger.info("Modal fechado - altera√ß√µes salvas com sucesso")
                return True
            except TimeoutException:
                # Se o modal ainda estiver aberto, pode ser que ainda esteja processando
                print("‚ö†Ô∏è Modal ainda aberto, aguardando mais tempo...")
                time.sleep(5)
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.invisibility_of_element_located((By.CSS_SELECTOR, "div.editor-section"))
                    )
                    self.logger.info("Modal fechado ap√≥s tempo adicional - altera√ß√µes salvas")
                    return True
                except TimeoutException:
                    self.logger.warning("Modal ainda aberto ap√≥s salvamento - pode haver erro")
                    return False
            
        except TimeoutException:
            self.logger.error("Bot√£o salvar n√£o encontrado ou n√£o clic√°vel")
            # Listar todos os bot√µes dispon√≠veis para debug
            try:
                botoes = self.driver.find_elements(By.TAG_NAME, "button")
                self.logger.info("Bot√µes dispon√≠veis no modal:")
                for i, botao in enumerate(botoes):
                    try:
                        texto = botao.text.strip()
                        classes = botao.get_attribute("class")
                        tipo = botao.get_attribute("type")
                        if texto or "btn" in classes:
                            self.logger.info(f"  Bot√£o {i}: '{texto}' | type='{tipo}' | class='{classes}'")
                    except:
                        pass
            except:
                pass
            return False
        except Exception as e:
            self.logger.error(f"Erro ao salvar altera√ß√µes: {e}")
            return False
    
    def processar_lote(self, chassis_lote, numero_lote):
        """
        Processa um lote de at√© 60 chassis
        
        Args:
            chassis_lote (list): Lista de chassis para processar neste lote
            numero_lote (int): N√∫mero do lote atual
            
        Returns:
            bool: True se o lote foi processado com sucesso
        """
        print(f"\nüîÑ PROCESSANDO LOTE {numero_lote}")
        print("="*50)
        print(f"üì¶ Chassis neste lote: {len(chassis_lote)}")
        
        try:
            # 1. Pesquisar o grupo
            if not self.pesquisar_grupo():
                print("‚ùå N√£o foi poss√≠vel encontrar o grupo")
                return False
            
            # 2. Clicar em editar para abrir o modal
            if not self.clicar_editar_grupo():
                print("‚ùå N√£o foi poss√≠vel abrir o modal de edi√ß√£o")
                return False
            
            print("‚úÖ Modal aberto, processando chassis...")
            
            # 3. Processar cada chassi do lote
            for i, chassi in enumerate(chassis_lote, 1):
                print(f"  Processando {i}/{len(chassis_lote)}: {chassi}")
                
                resultado = self.pesquisar_e_adicionar_chassi(chassi)
                
                if resultado:
                    self.carros_adicionados.append(chassi)
                    print(f"    ‚úÖ Adicionado")
                elif chassi in self.carros_ja_no_grupo:
                    print(f"    ‚ö†Ô∏è J√° estava no grupo")
                else:
                    self.carros_nao_encontrados.append(chassi)
                    print(f"    ‚ùå N√£o adicionado")
                
                self.total_processados += 1
                time.sleep(0.5)  # Pequena pausa entre pesquisas
            
            # 4. Salvar altera√ß√µes do lote
            print(f"\nüíæ Salvando altera√ß√µes do lote {numero_lote}...")
            if self.salvar_alteracoes():
                print(f"‚úÖ Lote {numero_lote} salvo com sucesso")
                time.sleep(2)  # Aguardar processamento do servidor
                return True
            else:
                print(f"‚ö†Ô∏è Problema ao salvar lote {numero_lote}")
                return False
                
        except Exception as e:
            self.logger.error(f"Erro ao processar lote {numero_lote}: {e}")
            return False
    
    def processar_todos_chassis(self, chassis_list):
        """
        Processa todos os chassis dividindo em lotes de 60
        """
        total_chassis = len(chassis_list)
        tamanho_lote = 50
        numero_lote = 1
        
        # Dividir chassis em lotes
        for i in range(0, total_chassis, tamanho_lote):
            chassis_lote = chassis_list[i:i + tamanho_lote]
            
            print(f"\nüìä Progresso: {min(i + tamanho_lote, total_chassis)}/{total_chassis} chassis")
            
            # Processar o lote atual
            sucesso_lote = self.processar_lote(chassis_lote, numero_lote)
            
            if not sucesso_lote:
                print(f"‚ùå Erro no lote {numero_lote}. Continuando para pr√≥ximo lote...")
            
            # Se n√£o √© o √∫ltimo lote, recarregar a p√°gina
            if i + tamanho_lote < total_chassis:
                print(f"‚è±Ô∏è Aguardando 5 segundos antes de recarregar...")
                time.sleep(5)
                
                if not self.recarregar_pagina():
                    print("‚ùå Erro ao recarregar p√°gina. Tentando continuar...")
                    time.sleep(2)
            
            numero_lote += 1
        
        print(f"\nüéâ Todos os lotes processados!")
    
    def gerar_relatorio(self):
        """Gera relat√≥rio final do processamento"""
        relatorio = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 RELAT√ìRIO FINAL                      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë Grupo processado: {self.nome_grupo:<30} ‚ïë
‚ïë Total processados: {self.total_processados:<29} ‚ïë
‚ïë Adicionados com sucesso: {len(self.carros_adicionados):<23} ‚ïë
‚ïë N√£o encontrados: {len(self.carros_nao_encontrados):<31} ‚ïë
‚ïë J√° estavam no grupo: {len(self.carros_ja_no_grupo):<27} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚úÖ CARROS ADICIONADOS:
{chr(10).join([f"  ‚Ä¢ {chassi}" for chassi in self.carros_adicionados]) if self.carros_adicionados else "  Nenhum"}

‚ùå CHASSIS N√ÉO ENCONTRADOS:
{chr(10).join([f"  ‚Ä¢ {chassi}" for chassi in self.carros_nao_encontrados]) if self.carros_nao_encontrados else "  Nenhum"}

‚ö†Ô∏è CHASSIS J√Å NO GRUPO:
{chr(10).join([f"  ‚Ä¢ {chassi}" for chassi in self.carros_ja_no_grupo]) if self.carros_ja_no_grupo else "  Nenhum"}
"""
        
        print(relatorio)
        
        if self.carros_nao_encontrados:
            print(f"Os seguintes chassis n√£o foram encontrados: {self.carros_nao_encontrados}")
        if self.carros_ja_no_grupo:
            print(f"Os seguintes chassis j√° estavam no grupo: {self.carros_ja_no_grupo}")
    
    def executar(self):
        """Executa o processo completo de automa√ß√£o"""
        try:
            print("üöÄ Iniciando automa√ß√£o de adi√ß√£o de carros")
            
            # 1. Definir grupo de ve√≠culos
            self.definir_grupo_veiculos()
            
            # 2. Escolher m√©todo e carregar chassis
            chassis_list = self.escolher_metodo_entrada()
            
            if not chassis_list:
                print("‚ùå Nenhum chassi foi inserido. Encerrando.")
                return
            
            # 3. Mostrar resumo
            total_lotes = (len(chassis_list) + 59) // 60  # Arredonda para cima
            print(f"\nüìä RESUMO DA AUTOMA√á√ÉO:")
            print(f"üè∑Ô∏è  Grupo: {self.nome_grupo}")
            print(f"üöó Total de chassis: {len(chassis_list)}")
            print(f"üì¶ Ser√£o processados em {total_lotes} lotes de at√© 60 chassis")
            print(f"üîÑ A p√°gina ser√° recarregada entre cada lote")
            
            # 4. Configurar browser
            print("\nüîß Configurando navegador...")
            self.setup_driver()
            
            # 5. Aguardar login manual
            self.fazer_login_inicial()
            
            # 6. Confirma√ß√£o final
            print("\n" + "="*50)
            print("‚ö†Ô∏è  CONFIRMA√á√ÉO FINAL")
            print("="*50)
            print("A automa√ß√£o ir√° processar os chassis em lotes.")
            print(f"Grupo a ser editado: {self.nome_grupo}")
            print(f"Total de lotes: {total_lotes}")
            
            confirmar = input("\nüöÄ Iniciar processamento? (s/n): ").lower()
            if confirmar not in ['s', 'sim', 'y', 'yes']:
                print("‚ùå Automa√ß√£o cancelada pelo usu√°rio")
                return
            
            # 7. Processar todos os chassis
            print("\nüîÑ Iniciando processamento...")
            self.processar_todos_chassis(chassis_list)
            
            # 8. Gerar relat√≥rio
            print("\nüìã Gerando relat√≥rio final...")
            self.gerar_relatorio()
            
            print("\nüéâ Automa√ß√£o conclu√≠da com sucesso!")
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Automa√ß√£o interrompida pelo usu√°rio (Ctrl+C)")
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o: {e}")
            self.logger.error(f"Erro durante execu√ß√£o: {e}")
        finally:
            if self.driver:
                input("\nPressione ENTER para fechar o navegador...")
                self.driver.quit()
                print("üîí Navegador fechado")


def main():
    """Fun√ß√£o principal da automa√ß√£o"""
    automacao = CarAdditionAutomation()
    automacao.executar()

if __name__ == '__main__':
    main()